The error message "SyntaxError: Failed to execute 'json' on 'Response': Unexpected token '\<', "\<\!doctype "... is not valid JSON" is a very common and clear indicator of a specific problem: **your JavaScript is trying to parse an HTML page as if it were a JSON object**.

This happens when a `fetch` request, instead of getting the expected JSON data from a server endpoint, receives an HTML page. This is because the server is returning an HTML error page (like a 404 Not Found page, a 500 Server Error page, or a login page) instead of the data your frontend expects. The `<!doctype html>` at the beginning of the HTML document is the unexpected `<` token that the JSON parser is complaining about.

### Prompt to Fix the Error

The fix requires a two-pronged approach: correcting the frontend to handle non-JSON responses gracefully and ensuring the backend provides a valid response. Given our focus is on the frontend first, we will adjust the JavaScript logic.

````
Act as a senior frontend developer tasked with fixing a critical JavaScript error. The "Unaki Appointment Booking" system is failing to load or seed data, showing a "SyntaxError: Unexpected token '<', "<!doctype "... is not valid JSON" error. This error occurs because a network request is returning an HTML page instead of JSON.

**Objective:**
Fix the JavaScript code so it no longer attempts to parse an HTML response as JSON, and instead correctly handles this error to prevent the application from crashing.

**Instructions:**

1.  **Identify the Problematic Code:** Locate the `seedSampleData()` and `loadData()` functions. The error occurs at the line where `response.json()` is called.
2.  **Implement Error Handling:**
    * **Check the Response Status:** Before calling `response.json()`, check if the `response.ok` property is `true`. This indicates a successful HTTP status code (200-299).
    * **Check the Content Type:** A more robust solution is to check the `Content-Type` header of the response to ensure it is `application/json` before attempting to parse it. Use `response.headers.get('content-type')`.
3.  **Correct the Logic:**
    * Wrap the `fetch` call and subsequent `.then()` blocks in a `try...catch` block.
    * Modify the `loadData()` and `seedSampleData()` functions to check the response. If the response is not `ok` or the content-type is not JSON, log a more informative error message to the console and handle the failure gracefully. The message should explain that the server returned an unexpected response.
    * The corrected logic should look something like this:
        ```javascript
        async seedSampleData() {
            try {
                // ... fetch code ...
                if (!response.ok || response.headers.get('content-type') !== 'application/json') {
                    console.error('Error: Server returned a non-JSON response.');
                    return; // Stop execution
                }
                const data = await response.json();
                // ... rest of the code ...
            } catch (error) {
                console.error('An error occurred during data seeding:', error);
            }
        }
        ```
**Final Output:**
Provide the complete, updated JavaScript code for the `seedSampleData()` and `loadData()` functions, showing the new, robust error-handling logic that will prevent the application from crashing when the server returns an HTML page instead of JSON.
````