# ðŸ“¦ Inventory Management Module â€“ Professional Development Plan

## 1. Overview

This document defines the **Inventory Management Module** for the spa management software. It outlines the database schema, UI flow, and Excel import/export functionality. The goal is to provide developers with a clear blueprint to implement a professional and scalable solution.

---

## 2. Database Schema

### 2.1 Category Master

```sql
CREATE TABLE category_master (
    category_id INT PRIMARY KEY AUTO_INCREMENT,
    category_name VARCHAR(100) NOT NULL UNIQUE
);
```

* Holds product categories (e.g., Oils, Creams, Shampoos).

### 2.2 Supplier Master

```sql
CREATE TABLE supplier_master (
    supplier_id INT PRIMARY KEY AUTO_INCREMENT,
    supplier_name VARCHAR(150) NOT NULL,
    contact VARCHAR(100),
    address TEXT
);
```

* Stores supplier information.

### 2.3 Inventory Master (Products)

```sql
CREATE TABLE inventory_master (
    product_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    category_id INT,
    supplier_id INT,
    unit VARCHAR(20),
    reorder_level INT DEFAULT 0,
    expiry_date DATE,
    username VARCHAR(50),   -- who created/updated product
    FOREIGN KEY (category_id) REFERENCES category_master(category_id),
    FOREIGN KEY (supplier_id) REFERENCES supplier_master(supplier_id)
);
```

* Holds product details, linked to category and supplier.

### 2.4 Inventory Transactions

```sql
CREATE TABLE inventory_transactions (
    transaction_id INT PRIMARY KEY AUTO_INCREMENT,
    product_id INT,
    transaction_type ENUM('IN','OUT') NOT NULL,
    quantity INT NOT NULL,
    transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    username VARCHAR(50),   -- who entered the record
    notes TEXT,
    FOREIGN KEY (product_id) REFERENCES inventory_master(product_id)
);
```

* Stores all stock movements (IN = purchase, OUT = usage/sale).

### 2.5 Current Stock Query Example

```sql
SELECT
    im.product_id,
    im.name AS product_name,
    cm.category_name,
    sm.supplier_name,
    im.username AS created_by,
    COALESCE(SUM(CASE WHEN it.transaction_type = 'IN' THEN it.quantity ELSE 0 END),0) -
    COALESCE(SUM(CASE WHEN it.transaction_type = 'OUT' THEN it.quantity ELSE 0 END),0) AS current_stock
FROM inventory_master im
JOIN category_master cm ON im.category_id = cm.category_id
LEFT JOIN supplier_master sm ON im.supplier_id = sm.supplier_id
LEFT JOIN inventory_transactions it ON im.product_id = it.product_id
GROUP BY im.product_id, im.name, cm.category_name, sm.supplier_name, im.username;
```

---

## 3. UI Flow (From Menu â†’ Inventory Management)

**Main Menu â†’ Inventory Management**

1. **Categories**

   * List categories.
   * Add/Edit/Delete category.

2. **Suppliers**

   * List suppliers.
   * Add/Edit/Delete supplier.

3. **Products**

   * List products (Name, Category, Supplier, Stock, Reorder Level, Created By).
   * Add/Edit/Delete product.
   * Import products from Excel.

4. **Transactions**

   * List transactions (Product, Type, Qty, Date, Entered By, Notes).
   * Add transaction (IN/OUT).
   * Import transactions from Excel.

5. **Reports**

   * Current Stock.
   * Low Stock.
   * Expiry Soon.
   * Usage Report.
   * Export reports to Excel/CSV.

---

## 4. Excel Import/Export Functionality

### 4.1 Product Import

* Expected Excel columns:
  `name | category_name | supplier_name | unit | reorder_level | expiry_date | username`
* System behavior:

  1. Match or create category/supplier automatically.
  2. Insert new product rows.

### 4.2 Transaction Import

* Expected Excel columns:
  `product_name | transaction_type | quantity | transaction_date | username | notes`
* System behavior:

  1. Match product by name.
  2. Insert into `inventory_transactions`.

### 4.3 Export

* Any report (stock, usage, low stock, expiry) can be exported as Excel/CSV.

### 4.4 Technology Recommendations

* **Node.js**: `exceljs` or `xlsx` library.
* **Python (Django/Flask)**: `pandas` + `openpyxl`.
* **PHP (Laravel)**: `maatwebsite/excel`.

---

## 5. Professional Features

* **Audit Trail**: Track who created/updated records using `username`.
* **Bulk Operations**: Excel import for quick onboarding of large product lists.
* **Reports**: Export-ready for managers to review offline.
* **Scalability**: Future option to add full user roles/permissions.

---

## 6. Development Deliverables

* Database schema (as above).
* Backend API for CRUD operations on categories, suppliers, products, transactions.
* Excel import/export service.
* Frontend UI with menu-based flow:

  * Tabs/pages for Categories, Suppliers, Products, Transactions, Reports.
* Report generation and export functionality.

---

âœ… This document provides a complete blueprint for developers to build the Inventory Management Module professionally, with Excel import/export support and audit tracking.
