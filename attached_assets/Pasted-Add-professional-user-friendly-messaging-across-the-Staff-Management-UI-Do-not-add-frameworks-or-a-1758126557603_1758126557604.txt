Add professional, user-friendly messaging across the Staff Management UI. Do not add frameworks or auth/CSRF. Keep Bootstrap + vanilla JS and the existing “modal only closes on Close/Save/Update” rule.

Goals

Every failure shows a clear, polite, actionable message (what went wrong + what to do).

Messages never wipe form data or kick users out; focus moves to where they can fix.

Success messages confirm what changed, using names (e.g., “Hanumanth added successfully”).

Message surfaces (use all three where appropriate)

Inline field feedback (Bootstrap invalid-feedback) directly under the field that needs fixing.

Toast/alert in #alertContainer for page-level events (load errors, save success, deletes).

Compact banner (optional) inside the modal body for multi-field API errors (e.g., 400 with multiple issues).

Toast styles & timing

Types: success / info / warning / danger

Auto-dismiss after 5–7s; allow manual close

One operation → one toast; don’t spam

Copy guidelines (tone & format)

Polite, specific, and brief: What failed, why (if known), how to fix.

Avoid technical jargon. Prefer:

“Please check your internet connection and try again.”

“That username is already taken. Pick a different one.”

Never blame (“you did X wrong”). Offer next steps.

Message catalog (implement these exact strings)

Create success: “✅ <FullName> was added successfully.”

Update success: “✅ Changes to <FullName> were saved.”

Delete success: “🗑️ <FullName> was deleted.”

Load success: “✅ Staff data loaded.”

Empty state: “No staff members found. Add your first staff member to get started.”

Network error: “We couldn’t reach the server. Please check your internet and try again.”

Server 500: “Something went wrong on our side. Please try again in a moment.”

Timeout: “The request is taking longer than expected. You can wait or try again.”

Unauthorized (dev should not occur): “This page is unavailable in your environment.”

409 username: “That username is already taken. Pick a different one.”

409 email: “An account with this email already exists.”

409 phone: “This phone number is already in use.”

400 field error (generic): “Please correct the highlighted fields and try again.”

Delete confirm title: “Delete staff member?”

Delete confirm body: “This can’t be undone. Delete <FullName>?”

Error mapping (implement centralized mapping)

Parse API error shape(s) and map to UI:

409 with field hints → inline feedback on that field + danger toast with short summary.

400 with { errors: { field: "message" } } → mark each field invalid with provided message; banner: “Please correct the highlighted fields.”

404 on edit/delete → toast: “We couldn’t find that staff member. Refresh and try again.”

>=500 → generic server message.

Network/fetch failures → network message above.

Inline validation (hook into existing validators)

When a field is invalid, set:

input.classList.add('is-invalid')

<div class="invalid-feedback" id="<fieldId>-error">Message</div>

aria-invalid="true", aria-describedby="<fieldId>-error"

On input/change, clear error live when valid (is-valid optional).

Form submission UX

On submit:

If any client-side invalid → prevent, scroll modal body to first error, focus it, banner “Please correct the highlighted fields.”

While saving → disable primary button, show spinner text (e.g., “Saving…”)

On success → toast success; set authorized close source; close modal; refresh table.

On server errors → keep modal open, restore primary button, show inline/banners/toast as mapped.

Page-level operations

Initial load error: hide table, show empty state plus a “Retry” button that calls the same load function.

Refresh button: show info toast “Refreshing staff data…”, then success/error per result.

Accessibility

Add a hidden alert region inside the modal body:
<div id="formStatus" role="alert" aria-live="polite" class="visually-hidden"></div>
Write the first error to it on submit.

Maintain focus order; after toast close, keep focus where the user was working.

Destructive actions (Delete)

Confirmation modal must show the staff name and a short summary of impact.

On failure (e.g., 500), keep the confirmation modal open and show a danger toast + inline text: “We couldn’t delete <FullName>. Please try again.”

Don’ts

Don’t close the modal on any error.

Don’t clear user inputs on error.

Don’t expose raw stack traces or SQL errors in UI.

Don’t show multiple toasts for one action.

Implementation checklist

Create a message helper (no new files required) to:

showToast(type, text)

setFieldError(fieldId, message) / clearFieldError(fieldId)

showFormBanner(message, type='danger') (small dismissible alert inside modal body)

announce(message) → writes to #formStatus

Add a single API error handler used by create/update/delete/load:

Detect status/network; map to the catalog above.

If field-level → set inline errors; else → toast + optional banner.

Ensure all existing fetch calls (/api/staff, /api/staff/:id) use this handler.

Acceptance criteria (verify)

Break internet → Add/Edit/Delete shows the network error toast; modal stays open; inputs preserved.

Trigger 409 on username/email/phone → the specific field shows an inline message; Save disabled until fixed.

Trigger 400 with multiple field errors → all invalid fields marked; banner appears; focus jumps to the first invalid.

Trigger 500 → generic server message; user can retry without losing data.

Successful Add/Edit/Delete → one success toast; modal closes only on allowed actions; table updates.

Initial load failure → empty state + Retry works.

No console errors.

Keep existing constraints

Email required; Phone required; Password required only on Add.

Work Schedule UI removed from Staff modal/table/performance (already done).

Modal closes only on Close/Save/Update.

Deliverables

Updated JS/HTML with:

Central message mapping,

Field-level inline errors,

Toasts/banners,

Focus/scroll to first error,

Hidden aria-live region,

Refactored fetch handlers to use the message helper.

Brief comments in code explaining error mapping and where to add new messages.

If file names differ, adapt to the current repo paths, but implement all messaging behavior above exactly.