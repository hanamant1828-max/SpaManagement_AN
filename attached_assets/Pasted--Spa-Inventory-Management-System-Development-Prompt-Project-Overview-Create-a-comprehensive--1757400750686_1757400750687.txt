# Spa Inventory Management System Development Prompt

## Project Overview
Create a comprehensive inventory management system for a spa management software with four core modules: Category Management, Product Management, Location Management, and Consumption Management.

## Core Requirements

### 1. Category Management
- Create, edit, and delete product categories (e.g., Skincare, Massage Oils, Towels, Equipment)
- Hierarchical category structure (main categories and subcategories)
- Category-specific attributes and properties
- Search and filter categories
- Category usage tracking and reporting

### 2. Product Management
- **Product Information:**
  - Product name, description, SKU/barcode
  - Category assignment
  - Brand, supplier details
  - Cost price, selling price, markup percentage
  - Product images and documentation
  
- **Inventory Tracking:**
  - Current stock levels
  - Minimum stock alerts/reorder points
  - Maximum stock levels
  - Unit of measurement (pieces, liters, kg, etc.)
  - Expiration date tracking for perishable items
  
- **Product Operations:**
  - Add new products
  - Edit product information
  - Archive/deactivate products
  - Bulk import/export functionality
  - Search and advanced filtering

### 3. Location Management
- **Multi-location Support:**
  - Multiple spa locations/branches
  - Storage areas within locations (treatment rooms, storage closet, reception)
  - Location-specific inventory levels
  - Inter-location stock transfers
  
- **Location Operations:**
  - Add/edit/delete locations
  - Assign products to specific locations
  - Location-based stock reports
  - Transfer requests and approvals

### 4. Consumption Management
- **Usage Tracking:**
  - Record product consumption during treatments/services
  - Link consumption to specific treatments or clients
  - Staff member who consumed the product
  - Date and time of consumption
  
- **Consumption Features:**
  - Quick consumption entry interface
  - Bulk consumption recording
  - Consumption history and analytics
  - Treatment-based consumption templates
  - Automatic stock deduction

## Technical Specifications

### Technology Stack
- **Frontend:** React.js with modern UI framework (Material-UI or Tailwind CSS)
- **Backend:** Node.js with Express.js
- **Database:** PostgreSQL or MongoDB
- **Authentication:** JWT-based authentication
- **File Upload:** Support for product images
- **Responsive Design:** Mobile and tablet friendly

### Key Features to Implement

#### Dashboard & Analytics
- Real-time inventory overview
- Low stock alerts
- Top consumed products
- Monthly/quarterly consumption reports
- Cost analysis and profit margins

#### Stock Management
- Purchase orders and receiving
- Stock adjustments (damage, theft, corrections)
- Stock movement history
- Barcode scanning capability
- Automated reorder suggestions

#### Reporting System
- Inventory valuation reports
- Consumption patterns analysis
- Location-wise stock reports
- Supplier performance reports
- Export to PDF/Excel functionality

#### User Management
- Role-based access control (Admin, Manager, Staff)
- User permissions for different modules
- Activity logging and audit trails

### Database Schema Requirements

#### Core Tables Needed:
- Categories (id, name, parent_id, description, created_at)
- Products (id, name, sku, category_id, cost_price, selling_price, description, image_url)
- Locations (id, name, address, type, active_status)
- Inventory (id, product_id, location_id, current_stock, min_stock, max_stock)
- Consumption (id, product_id, location_id, quantity, consumed_by, consumed_at, treatment_id)
- Stock_movements (id, product_id, location_id, movement_type, quantity, reference_id)

### API Endpoints Structure
```
Categories: GET, POST, PUT, DELETE /api/categories
Products: GET, POST, PUT, DELETE /api/products
Locations: GET, POST, PUT, DELETE /api/locations
Inventory: GET, POST, PUT /api/inventory
Consumption: GET, POST /api/consumption
Reports: GET /api/reports/{report-type}
```

### UI/UX Requirements
- Clean, intuitive interface suitable for spa staff
- Quick access buttons for common operations
- Search functionality across all modules
- Responsive design for tablets (spa reception use)
- Data tables with sorting, filtering, and pagination
- Modal dialogs for forms and confirmations

## Deliverables Expected
1. Complete web application with all four modules
2. Database schema and setup scripts
3. API documentation
4. User manual/documentation
5. Basic test data for demonstration
6. Deployment instructions

## Additional Considerations
- Data backup and recovery procedures
- Performance optimization for large product catalogs
- Integration capabilities with existing spa management systems
- Multi-language support (if required)
- Print functionality for reports and labels

Please ensure the application is scalable, maintainable, and follows modern web development best practices.like that 