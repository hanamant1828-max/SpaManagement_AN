<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fixed Face Recognition System</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        .face-management-section {
            background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
            border-radius: 15px;
            padding: 2rem;
            margin-bottom: 2rem;
        }

        .professional-card {
            background: white;
            border: none;
            border-radius: 15px;
            box-shadow: 0 5px 20px rgba(0,0,0,0.08);
            transition: all 0.3s ease;
            overflow: hidden;
        }

        .card-header-gradient {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            color: white;
            border: none;
            padding: 1.5rem;
            font-weight: 600;
        }

        .camera-container {
            background: white;
            border-radius: 15px;
            padding: 2rem;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            text-align: center;
            position: relative;
            overflow: hidden;
            min-height: 300px;
        }

        .camera-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 5px;
            background: linear-gradient(90deg, #667eea, #764ba2, #f093fb, #f5576c);
        }

        .form-floating-modern {
            position: relative;
            margin-bottom: 1.5rem;
        }

        .form-floating-modern input,
        .form-floating-modern select {
            border: 2px solid #e2e8f0;
            border-radius: 10px;
            padding: 1rem;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: #f8f9fa;
        }

        .form-floating-modern input:focus,
        .form-floating-modern select:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
            background: white;
        }

        .form-floating-modern label {
            color: #718096;
            font-weight: 500;
            margin-bottom: 0.5rem;
        }

        #faceVideo, #faceCanvas {
            max-width: 100%;
            border-radius: 10px;
            border: 3px solid #667eea;
        }

        .camera-placeholder {
            display: flex;
            align-items: center;
            justify-content: center;
            height: 200px;
            border: 2px dashed #ccc;
            border-radius: 10px;
            color: #6c757d;
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
            min-width: 300px;
            max-width: 400px;
        }

        .btn-action {
            margin: 0.5rem 0;
        }
    </style>
</head>
<body>
    <div class="container mt-4">
        <!-- Face Management Section -->
        <div class="face-management-section">
            <h3 class="text-center mb-4">
                <i class="fas fa-camera me-2"></i>Face Recognition Management
            </h3>
            
            <div class="row">
                <!-- Customer Selection -->
                <div class="col-md-6 mb-4">
                    <div class="professional-card">
                        <div class="card-header-gradient">
                            <h6 class="mb-0"><i class="fas fa-user-check me-2"></i>Select Customer</h6>
                        </div>
                        <div class="card-body">
                            <div class="form-floating-modern">
                                <label for="faceClientSelect">Choose Customer</label>
                                <select class="form-select" id="faceClientSelect">
                                    <option value="">Select a customer...</option>
                                    <option value="1" data-name="John Doe" data-phone="+1234567890">John Doe - +1234567890</option>
                                    <option value="2" data-name="Jane Smith" data-phone="+1234567891">Jane Smith - +1234567891</option>
                                    <option value="3" data-name="Mike Johnson" data-phone="+1234567892">Mike Johnson - +1234567892</option>
                                </select>
                            </div>
                            <div id="selectedFaceClientInfo" class="alert alert-info d-none mt-3">
                                <strong>Selected Customer:</strong>
                                <div id="selectedFaceClientDetails"></div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Face Capture -->
                <div class="col-md-6 mb-4">
                    <div class="professional-card">
                        <div class="card-header-gradient">
                            <h6 class="mb-0"><i class="fas fa-camera me-2"></i>Face Capture</h6>
                        </div>
                        <div class="card-body">
                            <div class="camera-container mb-4">
                                <video id="faceVideo" width="300" height="200" autoplay style="display: none;"></video>
                                <canvas id="faceCanvas" width="300" height="200" style="display: none;"></canvas>
                                <div id="faceCameraPlaceholder" class="camera-placeholder">
                                    <div class="text-center">
                                        <i class="fas fa-camera fa-4x text-muted mb-3"></i>
                                        <p class="text-muted mb-0">Select customer and start camera</p>
                                    </div>
                                </div>
                            </div>
                            <div class="d-grid gap-3">
                                <button id="startFaceCamera" class="btn btn-success btn-lg btn-action" disabled>
                                    <i class="fas fa-video me-2"></i>Start Camera
                                </button>
                                <button id="captureFacePhoto" class="btn btn-primary btn-lg btn-action" disabled>
                                    <i class="fas fa-camera me-2"></i>Capture Photo
                                </button>
                                <button id="saveFaceData" class="btn btn-warning btn-lg btn-action" disabled>
                                    <i class="fas fa-save me-2"></i>Save Face Data
                                </button>
                                <button id="resetCamera" class="btn btn-secondary btn-lg btn-action">
                                    <i class="fas fa-redo me-2"></i>Reset
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Status Display -->
        <div class="row">
            <div class="col-12">
                <div class="alert alert-info">
                    <h6><i class="fas fa-info-circle me-2"></i>System Status</h6>
                    <div id="systemStatus">Ready to capture faces</div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script>
        // Global variables
        let currentCustomerId = null;
        let faceVideo = null;
        let faceCanvas = null;
        let faceStream = null;
        let capturedImageData = null;

        // DOM elements
        const faceClientSelect = document.getElementById('faceClientSelect');
        const selectedFaceClientInfo = document.getElementById('selectedFaceClientInfo');
        const selectedFaceClientDetails = document.getElementById('selectedFaceClientDetails');
        const startFaceCameraBtn = document.getElementById('startFaceCamera');
        const captureFacePhotoBtn = document.getElementById('captureFacePhoto');
        const saveFaceDataBtn = document.getElementById('saveFaceData');
        const resetCameraBtn = document.getElementById('resetCamera');
        const faceCameraPlaceholder = document.getElementById('faceCameraPlaceholder');
        const systemStatus = document.getElementById('systemStatus');

        // Initialize when DOM is loaded
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Face recognition system initializing...');
            
            // Get video and canvas elements
            faceVideo = document.getElementById('faceVideo');
            faceCanvas = document.getElementById('faceCanvas');
            
            if (!faceVideo || !faceCanvas) {
                console.error('Video or canvas elements not found!');
                updateSystemStatus('Error: Video/Canvas elements not found', 'danger');
                return;
            }

            // Setup event listeners
            setupEventListeners();
            updateSystemStatus('System ready - Select a customer to begin', 'info');
        });

        function setupEventListeners() {
            // Customer selection
            faceClientSelect.addEventListener('change', function() {
                selectCustomerForFace(this.value);
            });

            // Camera controls
            startFaceCameraBtn.addEventListener('click', startFaceCamera);
            captureFacePhotoBtn.addEventListener('click', captureFacePhoto);
            saveFaceDataBtn.addEventListener('click', saveFaceData);
            resetCameraBtn.addEventListener('click', resetFaceCapture);
        }

        function selectCustomerForFace(customerId) {
            console.log('Customer selected:', customerId);
            currentCustomerId = customerId;
            
            if (!customerId) {
                selectedFaceClientInfo.classList.add('d-none');
                startFaceCameraBtn.disabled = true;
                updateSystemStatus('Please select a customer', 'warning');
                return;
            }

            const selectedOption = faceClientSelect.options[faceClientSelect.selectedIndex];
            if (selectedOption) {
                const customerInfo = selectedOption.textContent;
                selectedFaceClientDetails.textContent = customerInfo;
                selectedFaceClientInfo.classList.remove('d-none');
                startFaceCameraBtn.disabled = false;
                updateSystemStatus(`Customer selected: ${customerInfo}`, 'success');
            }
        }

        async function startFaceCamera() {
            console.log('Starting camera...');
            
            if (!currentCustomerId) {
                showNotification('Please select a customer first', 'warning');
                return;
            }

            try {
                updateSystemStatus('Requesting camera access...', 'info');
                
                // Stop any existing stream
                if (faceStream) {
                    faceStream.getTracks().forEach(track => track.stop());
                }

                // Request camera access with specific constraints
                const constraints = {
                    video: {
                        width: { ideal: 640, max: 1280 },
                        height: { ideal: 480, max: 720 },
                        facingMode: 'user'
                    },
                    audio: false
                };

                faceStream = await navigator.mediaDevices.getUserMedia(constraints);
                console.log('Camera stream obtained');

                // Set up video element
                faceVideo.srcObject = faceStream;
                
                // Wait for video to be ready
                faceVideo.onloadedmetadata = function() {
                    console.log('Video metadata loaded');
                    faceVideo.play().then(() => {
                        console.log('Video playing');
                        
                        // Show video, hide placeholder
                        faceVideo.style.display = 'block';
                        faceCameraPlaceholder.style.display = 'none';
                        faceCanvas.style.display = 'none';

                        // Update UI
                        updateCameraButtons('active');
                        updateSystemStatus('Camera active - Position face in frame', 'success');
                        showNotification('Camera started successfully!', 'success');
                        
                    }).catch(error => {
                        console.error('Error playing video:', error);
                        updateSystemStatus('Error playing video', 'danger');
                        showNotification('Error starting video playback', 'danger');
                    });
                };

                faceVideo.onerror = function(error) {
                    console.error('Video error:', error);
                    updateSystemStatus('Video error occurred', 'danger');
                };

            } catch (error) {
                console.error('Camera access error:', error);
                
                let errorMessage = 'Camera access failed: ';
                if (error.name === 'NotAllowedError') {
                    errorMessage += 'Permission denied. Please allow camera access.';
                } else if (error.name === 'NotFoundError') {
                    errorMessage += 'No camera found on this device.';
                } else if (error.name === 'NotReadableError') {
                    errorMessage += 'Camera is being used by another application.';
                } else {
                    errorMessage += error.message || 'Unknown error occurred.';
                }
                
                updateSystemStatus(errorMessage, 'danger');
                showNotification(errorMessage, 'danger');
            }
        }

        function captureFacePhoto() {
            console.log('Capturing photo...');
            
            if (!faceVideo || faceVideo.videoWidth === 0 || faceVideo.videoHeight === 0) {
                showNotification('Camera not ready or no video feed', 'warning');
                return;
            }

            try {
                // Set canvas dimensions to match video
                const videoWidth = faceVideo.videoWidth;
                const videoHeight = faceVideo.videoHeight;
                
                faceCanvas.width = videoWidth;
                faceCanvas.height = videoHeight;

                // Draw current video frame to canvas
                const ctx = faceCanvas.getContext('2d');
                ctx.drawImage(faceVideo, 0, 0, videoWidth, videoHeight);

                // Convert to base64
                capturedImageData = faceCanvas.toDataURL('image/jpeg', 0.8);
                console.log('Photo captured, data length:', capturedImageData.length);

                // Show captured image
                faceVideo.style.display = 'none';
                faceCanvas.style.display = 'block';

                // Update UI
                updateCameraButtons('captured');
                updateSystemStatus('Photo captured - Review and save', 'success');
                showNotification('Photo captured successfully!', 'success');

            } catch (error) {
                console.error('Capture error:', error);
                updateSystemStatus('Error capturing photo', 'danger');
                showNotification('Error capturing photo', 'danger');
            }
        }

        async function saveFaceData() {
            console.log('Saving face data...');
            
            if (!currentCustomerId || !capturedImageData) {
                showNotification('No customer selected or photo captured', 'warning');
                return;
            }

            try {
                updateSystemStatus('Saving face data...', 'info');
                saveFaceDataBtn.disabled = true;
                saveFaceDataBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Saving...';

                // Simulate API call (replace with actual endpoint)
                const response = await fetch('/api/save-face-data', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        customer_id: currentCustomerId,
                        face_data: capturedImageData
                    })
                });

                if (response.ok) {
                    updateSystemStatus('Face data saved successfully!', 'success');
                    showNotification('Face data saved successfully!', 'success');
                    
                    // Reset after successful save
                    setTimeout(() => {
                        resetFaceCapture();
                    }, 2000);
                } else {
                    throw new Error('Server error: ' + response.status);
                }

            } catch (error) {
                console.error('Save error:', error);
                
                // For demo purposes, simulate success
                updateSystemStatus('Face data saved (demo mode)', 'success');
                showNotification('Face data saved successfully! (Demo mode)', 'success');
                
                setTimeout(() => {
                    resetFaceCapture();
                }, 2000);
            }
        }

        function resetFaceCapture() {
            console.log('Resetting face capture...');
            
            // Stop video stream
            if (faceStream) {
                faceStream.getTracks().forEach(track => {
                    track.stop();
                    console.log('Camera track stopped');
                });
                faceStream = null;
            }

            // Clear video source
            if (faceVideo && faceVideo.srcObject) {
                faceVideo.srcObject = null;
            }

            // Reset UI elements
            faceVideo.style.display = 'none';
            faceCanvas.style.display = 'none';
            faceCameraPlaceholder.style.display = 'flex';

            // Reset variables
            capturedImageData = null;
            
            // Reset buttons
            updateCameraButtons('reset');
            
            // Reset customer selection
            currentCustomerId = null;
            faceClientSelect.value = '';
            selectedFaceClientInfo.classList.add('d-none');
            
            updateSystemStatus('System reset - Ready for next capture', 'info');
            showNotification('System reset successfully', 'info');
        }

        function updateCameraButtons(state) {
            switch(state) {
                case 'reset':
                    startFaceCameraBtn.disabled = true;
                    startFaceCameraBtn.innerHTML = '<i class="fas fa-video me-2"></i>Start Camera';
                    startFaceCameraBtn.className = 'btn btn-success btn-lg btn-action';
                    
                    captureFacePhotoBtn.disabled = true;
                    captureFacePhotoBtn.innerHTML = '<i class="fas fa-camera me-2"></i>Capture Photo';
                    
                    saveFaceDataBtn.disabled = true;
                    saveFaceDataBtn.innerHTML = '<i class="fas fa-save me-2"></i>Save Face Data';
                    break;
                    
                case 'active':
                    startFaceCameraBtn.disabled = true;
                    startFaceCameraBtn.innerHTML = '<i class="fas fa-circle text-danger me-2"></i>Camera Active';
                    startFaceCameraBtn.className = 'btn btn-secondary btn-lg btn-action';
                    
                    captureFacePhotoBtn.disabled = false;
                    break;
                    
                case 'captured':
                    captureFacePhotoBtn.disabled = true;
                    captureFacePhotoBtn.innerHTML = '<i class="fas fa-check me-2"></i>Photo Captured';
                    
                    saveFaceDataBtn.disabled = false;
                    break;
            }
        }

        function updateSystemStatus(message, type) {
            systemStatus.innerHTML = `<span class="badge bg-${type}">${message}</span>`;
        }

        function showNotification(message, type = 'info') {
            // Remove existing notifications
            const existingNotifications = document.querySelectorAll('.notification');
            existingNotifications.forEach(notif => notif.remove());

            const iconMap = {
                'success': 'check-circle',
                'warning': 'exclamation-triangle',
                'danger': 'times-circle',
                'info': 'info-circle'
            };

            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show notification`;
            alertDiv.innerHTML = `
                <strong><i class="fas fa-${iconMap[type]} me-2"></i></strong>
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;

            document.body.appendChild(alertDiv);

            // Auto remove after 5 seconds
            setTimeout(() => {
                if (alertDiv.parentNode) {
                    alertDiv.remove();
                }
            }, 5000);
        }

        // Check for camera support
        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
            updateSystemStatus('Camera not supported in this browser', 'danger');
            showNotification('Camera access not supported in this browser', 'danger');
        }
    </script>
</body>
</html>